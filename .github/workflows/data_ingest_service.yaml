name: CI-CD - data_ingest_service

on:
  push:
    branches: [main]
    paths:
      - "services/data_ingest_service/**"
      - ".github/workflows/data_ingest_service.yaml"
      - "dvc.yaml"
      - "k8s/data_ingest_service/**"
  pull_request:
    paths: 
     - "services/data_ingest_service/**"
     - ".github/workflows/data_ingest_service.yaml"
     - "dvc.yaml"
     - "k8s/data_ingest_service/**"
  workflow_dispatch:

env:
  SERVICE_NAME: data_ingest_service
  DOCKER_IMAGE: ghcr.io/minhtb105/data_ingest_service
  PYTHON_VERSION: '3.10'

permissions:
  contents: read
  packages: write 

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('services/${{ env.SERVICE_NAME }}/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r services/${{ env.SERVICE_NAME }}/requirements.txt
          pip install pytest azure-storage-blob
          pip install ruff

      - name: Download raw data from Azure Blob
        env:
          AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
        run: |
          python - <<'EOF'
          import os
          from azure.storage.blob import BlobServiceClient

          connection_string = os.environ["AZURE_STORAGE_CONNECTION_STRING"]
          container_name = "dvcstore"
          prefix = "dvc/data/raw/ml-100k"
          local_folder = "data/raw/ml-100k"

          os.makedirs(local_folder, exist_ok=True)

          blob_service_client = BlobServiceClient.from_connection_string(connection_string)
          container_client = blob_service_client.get_container_client(container_name)

          for blob in container_client.list_blobs(name_starts_with=prefix):
              relative_path = os.path.relpath(blob.name, prefix)
              blob_path = os.path.join(local_folder, relative_path)
              os.makedirs(os.path.dirname(blob_path), exist_ok=True)
              with open(blob_path, "wb") as f:
                f.write(container_client.download_blob(blob.name).readall())
                print(f"Downloaded {blob.name} â†’ {blob_path}")
          EOF

      - name: Run ruff and fix
        run: |
          cd services/${{ env.SERVICE_NAME }}
          ruff check . --fix

      - name: Commit changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore: auto-fix code style with ruff" || echo "No changes to commit"
          git push

      - name: Run tests
        run: |
          cd services/${{ env.SERVICE_NAME }}
          export PYTHONPATH=$(pwd)
          pytest tests --maxfail=1 -q

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: services/${{ env.SERVICE_NAME }}
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:v1
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.30.0   

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: Minh_group
          cluster-name: myAKSCluster

      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy@v4
        with:
          manifests: |
            k8s/${{ env.SERVICE_NAME }}/deployment.yaml
            k8s/${{ env.SERVICE_NAME }}/service.yaml
          images: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          namespace: default
